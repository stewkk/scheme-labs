* Лекция 2. Языки семейства LISP. Язык программирования Scheme
  :PROPERTIES:
  :CUSTOM_ID: лекция-2.-языки-семейства-lisp.-язык-программирования-scheme
  :END:
LISP (от *LIS*t *P*rocessing) --- язык программирования, созданный
Джоном МакКарти в 1950-1960-е годы. Породил целое семейство языков
со сходным синтаксисом и идеологией: Common Lisp, Scheme, Closure и т.д.

Scheme --- язык семейства LISP, созданный Гаем Стилом и Джеральдом
Сассманом в 1970-е годы. Отличается простотой и минималистичным
дизайном.

Диалект Scheme используется в книге Абельсона и Сассмана «Структура
и интерпретация компьютерных программ» (известна под аббревиатурой
[[file:sicp.pdf][SICP]]). Первые две главы этой книги содержат основы
программирования на Scheme (но без макросов), ими можно пользоваться
в качестве учебника.

В нашем курсе мы будем использовать диалект Scheme R5RS. Официальную
спецификацию этого диалекта можно прочитать в PDF-ке <r5rs.pdf>.

Основные постулаты языков семейства Lisp:

1. Единство кода и данных.
2. Всё есть список.
3. Выражения являются спискам, операция указывается в первом элементы.
4. Все выражения вычисляют значения.

Грамматику списков можно следующим образом описать при помощи БНФ (формы
Бэкуса-Наура):

#+begin_example
  <терм>   ::= <атом> | <список>
  <список> ::= (<термы>)
  <термы>  ::= <пусто> | <терм> <термы>
  <атом>   ::= <переменная> | <число> | <символ> | <строка>
#+end_example

Иначе говоря:

- Терм --- это либо атом, либо список.
- Список --- последовательность термов (возможно пустая) в круглых
  скобках.
- Атом --- имя переменной, число, символ или строка. Подробнее
  разновидности атомов мы изучим позже.

В выражениях языка Scheme после открывающей круглой скобки указывается
операция. Операцией может быть либо вызов функции, либо так называемая
*особая форма.* В случае вызова функции первым термом после скобок
является имя функции или выражение, порождающее функцию. В случае особой
формы после открывающей круглой скобки располагается *ключевое слово.*

/(в процессе подготовки)/

Переменные в Scheme определяются при помощи конструкции =define=. Её
синтаксис:

#+begin_example
  (define ‹имя-переменной› ‹выражение›)
#+end_example

#+begin_src scheme
  (define (area r)
  (* r r 3.1415926))
#+end_src

Управляющие конструкции:

1. Объявление глобальных переменных

#+begin_example
  (define <var> <val>)
  (define (f <args>) <expr>)
#+end_example

То же самое:

#+begin_example
  (define f
    (lambda (<args>)
      <expr>))
#+end_example

2. Ветвление

#+begin_example
  (if <условие>
      <если истина, по умолчанию #t>
      <если ложь, по умолчанию #f>)
#+end_example

#+begin_example
  (cond
    (<условие 1> <выражение>)
    (<условие 2> <выражение>)
    (else <выражение>)
#+end_example

#+begin_example
  (and/or <условие 1>
          <условие 2>
          ...
          <условие n>)

  (and <усл>
       <выраж>);корректная запись
  (if <усл>
      <выраж>
      #f);некорректная запись

  (or <усл> <выраж>);корректно
  (if <усл>
      #t
      <выраж);некорректно

  (and (not <усл>) <выраж>);корректно
  (if <усл>
      #f
      <выраж>);некорректно

  (or (not <усл>) <выраж>);корректно
  (if <усл>
      <выраж>
      #t);некорректно
#+end_example
