(define (day-of-week-fixed-month day month year)
  (remainder (+ year
                (quotient year 4)
                (- (quotient year 100))
                (quotient year 400)
                (char->integer (string-ref "-bed=pen+mad." month))
                day)
             7))

(define (day-of-week day month year)
  (if (< month 3)
      (day-of-week-fixed-month day month (- year 1))
      (day-of-week-fixed-month day month year)))

(define (test-day-of-week name)
  (display name)
  (newline)
  (display "04 12 1975 ")
  (display (day-of-week 04 12 1975))
  (newline)
  (display "04 12 2006 ")
  (display (day-of-week 04 12 2006))
  (newline)
  (display "29 05 2013 ")
  (display (day-of-week 29 05 2013))
  (newline)
  (display "01 01 1970 ")
  (display (day-of-week 01 01 1970))
  (newline)
  (display "02 01 1970 ")
  (display (day-of-week 02 01 1970))
  (newline)
  (display "03 01 1970 ")
  (display (day-of-week 03 01 1970))
  (newline)
  (display "04 01 1970 ")
  (display (day-of-week 04 01 1970))
  (newline)
  (display "05 01 1970 ")
  (display (day-of-week 05 01 1970))
  (newline)
  (display "06 01 1970 ")
  (display (day-of-week 06 01 1970))
  (newline)
  (newline))

(test-day-of-week "Sakamoto's:")

(define (day-of-week-fixed-month day month year)
  (remainder (+ year
                (quotient year 4)
                (- (quotient year 100))
                (quotient year 400)
                (or
                    (and (= month  1) 0)
                    (and (= month  2) 3)
                    (and (= month  3) 2)
                    (and (= month  4) 5)
                    (and (= month  5) 0)
                    (and (= month  6) 3)
                    (and (= month  7) 5)
                    (and (= month  8) 1)
                    (and (= month  9) 4)
                    (and (= month 10) 6)
                    (and (= month 11) 2)
                    (and (= month 12) 4))
                day)
             7))
(define (day-of-week day month year)
  (if (< month 3)
      (day-of-week-fixed-month day month (- year 1))
      (day-of-week-fixed-month day month year)))

(test-day-of-week "Sakamoto 2:")

(define (calc-day-of-week2 day month year)
  (remainder (+ day
                (quotient (* 31 month) 12)
                year
                (quotient year 4)
                (- (quotient year 100))
                (quotient year 400))
             7))

(define (day-of-week day month year)
  (if (or (= month 1) (= month 2))
      (calc-day-of-week2 day (+ month 10) (- year 1))
      (calc-day-of-week2 day (- month 2) year)))

(test-day-of-week "ru.wikibooks.org:")

(define (D a b c)
  (- (* b b)
     (* 4 a c)))

(define (quadratic_equation_by_D a b D)
  (if (>= D 0)
      (if (> D 0)
          (list (/ (+ (- b) (sqrt D)) (* 2 a))
                (/ (- (- b) (sqrt D)) (* 2 a)))
          (list (/ (- b) (* 2 a))))
      (list)))

(define (quadratic_equation a b c)
  (quadratic_equation_by_D a b (D a b c)))

(display (quadratic_equation 2 5 -3)) ;; -3 1/2
(newline)
(display (quadratic_equation 4 21 5)) ;; -5 -1/4
(newline)
(display (quadratic_equation 4 -12 9)) ;; 3/2
(newline)
(display (quadratic_equation 1 2 17)) ;; нет корней
(newline)

(define (my-gcd a b)
  (if (= b 0)
      a
      (my-gcd b (remainder a b))))

(define (my-lcm a b)
  (quotient (* a b) (my-gcd a b)))

(define (recursive-prime-test n i)
  (or (> (* i i) n)
      (and
       (> (remainder n i) 0)
       (> (remainder n (+ i 2)) 0)
       (recursive-prime-test n (+ i 6)))))

(define (prime? n)
  (or (= n 2)
      (= n 3)
      (and (>= n 5)
           (> (remainder n 2) 0)
           (> (remainder n 3) 0)
           (recursive-prime-test n 5))))

(display (prime? 1))
(newline)
(display (prime? 2))
(newline)
(display (prime? 3))
(newline)
(display (prime? 4))
(newline)
(display (prime? 5))
(newline)
(display (prime? 6))
(newline)
(display (prime? 7))
(newline)
(display (prime? 8))
(newline)
(display (prime? 13))
(newline)
